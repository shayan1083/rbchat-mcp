from mcp.server.fastmcp import FastMCP
from settings import Settings
from user_repository import UserRepository
import logging
from llm_logger import log_error, log_sql_output
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

settings = Settings()
logger = logging.getLogger("llm_logger")

MCP_PORT =  settings.MCP_SERVER_PORT
mcp = FastMCP("RBChat")


@mcp.tool()
def run_sql_query(query: str) -> str:
    """
    Executes a safe, read-only database SELECT query and returns the results.

    Args:
        query: A database language SELECT query generated by the LLM, such as SQL

    Returns:
        A formatted string or JSON of the result rows.
    """
    log_sql_output(query)
    if not query.strip().lower().startswith("select"):
        return "Only SELECT queries are allowed."

    try:
        with UserRepository() as user_repo:
            result = user_repo.run_sql_query(query)
        return str(result)
    except Exception as e:
        log_error(f"Error running SQL query: {e}")
        return f"Query failed: {e}"


mcp_app = mcp.streamable_http_app()
app = FastAPI(lifespan=mcp_app.router.lifespan_context)


app.mount("/mcp-server", mcp_app, "mcp")

app.add_middleware(
    CORSMiddleware,
    allow_origins=[settings.ALLOWED_ORIGINS],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/healthcheck")
async def health_check():
    return {"status": 200, "message": "MCP server is running"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("tools:app", port=int(MCP_PORT), reload=True)
# uvicorn tools:app --reload --port 7999
